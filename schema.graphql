# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Configuration {
  id: ID!
  name: String
  value: JSON
}

input ConfigurationWhereUniqueInput {
  id: ID
  name: String
}

input ConfigurationWhereInput {
  AND: [ConfigurationWhereInput!]
  OR: [ConfigurationWhereInput!]
  NOT: [ConfigurationWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ConfigurationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ConfigurationUpdateInput {
  name: String
  value: JSON
}

input ConfigurationUpdateArgs {
  where: ConfigurationWhereUniqueInput!
  data: ConfigurationUpdateInput!
}

input ConfigurationCreateInput {
  name: String
  value: JSON
}

type Language {
  id: ID!
  code: LanguageCodeType
  enabled: Boolean
  isDefault: Boolean
  createdAt: DateTime
}

enum LanguageCodeType {
  sr
  ro
  ii
  ty
  tl
  yi
  ak
  ms
  ar
  no
  oj
  ff
  fa
  sq
  ay
  az
  zh
  cr
  et
  gn
  ik
  iu
  kr
  kv
  kg
  ku
  lv
  mg
  mn
  om
  ps
  qu
  sc
  sw
  uz
  za
  bi
  nb
  nn
  id
  tw
  eo
  ia
  ie
  io
  vo
  bh
  he
  sa
  cu
  pi
  ae
  la
  hy
  ss
  bo
  nr
  sl
  or
  nd
  na
  mi
  mr
  lu
  rn
  km
  fy
  bn
  av
  ab
  aa
  af
  am
  an
  as
  bm
  ba
  eu
  be
  bs
  br
  bg
  my
  ca
  ch
  ce
  ny
  cv
  kw
  co
  hr
  cs
  da
  dv
  nl
  dz
  en
  ee
  fo
  fj
  fi
  fr
  gl
  ka
  de
  el
  gu
  ht
  ha
  hz
  hi
  ho
  hu
  ga
  ig
  is
  it
  ja
  jv
  kl
  kn
  ks
  kk
  ki
  rw
  ky
  ko
  kj
  lb
  lg
  li
  ln
  lo
  lt
  gv
  mk
  ml
  mt
  mh
  nv
  ne
  ng
  oc
  os
  pa
  pl
  pt
  rm
  ru
  sd
  se
  sm
  sg
  gd
  sn
  si
  sk
  so
  st
  es
  su
  sv
  ta
  te
  tg
  th
  ti
  tk
  tn
  to
  tr
  ts
  tt
  ug
  uk
  ur
  ve
  vi
  wa
  cy
  wo
  xh
  yo
  zu
}

input LanguageWhereUniqueInput {
  id: ID
  code: LanguageCodeType
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  code: LanguageCodeTypeNullableFilter
  enabled: BooleanFilter
  isDefault: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input LanguageCodeTypeNullableFilter {
  equals: LanguageCodeType
  in: [LanguageCodeType!]
  notIn: [LanguageCodeType!]
  not: LanguageCodeTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  code: OrderDirection
  enabled: OrderDirection
  isDefault: OrderDirection
  createdAt: OrderDirection
}

input LanguageUpdateInput {
  code: LanguageCodeType
  enabled: Boolean
  isDefault: Boolean
  createdAt: DateTime
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  code: LanguageCodeType
  enabled: Boolean
  isDefault: Boolean
  createdAt: DateTime
}

type Translation {
  id: ID!
  language: String
  key: String
  value: String
  compoundKey: String
}

input TranslationWhereUniqueInput {
  id: ID
  compoundKey: String
}

input TranslationWhereInput {
  AND: [TranslationWhereInput!]
  OR: [TranslationWhereInput!]
  NOT: [TranslationWhereInput!]
  id: IDFilter
  language: StringFilter
  key: StringFilter
  value: StringFilter
  compoundKey: StringFilter
}

input TranslationOrderByInput {
  id: OrderDirection
  language: OrderDirection
  key: OrderDirection
  value: OrderDirection
  compoundKey: OrderDirection
}

input TranslationUpdateInput {
  language: String
  key: String
  value: String
}

input TranslationUpdateArgs {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateInput!
}

input TranslationCreateInput {
  language: String
  key: String
  value: String
}

type ContactRequest {
  id: ID!
  date: DateTime
  data: String
}

input ContactRequestWhereUniqueInput {
  id: ID
}

input ContactRequestWhereInput {
  AND: [ContactRequestWhereInput!]
  OR: [ContactRequestWhereInput!]
  NOT: [ContactRequestWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  data: StringFilter
}

input ContactRequestOrderByInput {
  id: OrderDirection
  date: OrderDirection
  data: OrderDirection
}

input ContactRequestUpdateInput {
  date: DateTime
  data: String
}

input ContactRequestUpdateArgs {
  where: ContactRequestWhereUniqueInput!
  data: ContactRequestUpdateInput!
}

input ContactRequestCreateInput {
  date: DateTime
  data: String
}

type Picture {
  id: ID!
  image: ImageFieldOutput
  code: String
  createdAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PictureWhereUniqueInput {
  id: ID
  code: String
}

input PictureWhereInput {
  AND: [PictureWhereInput!]
  OR: [PictureWhereInput!]
  NOT: [PictureWhereInput!]
  id: IDFilter
  code: StringFilter
  createdAt: DateTimeNullableFilter
}

input PictureOrderByInput {
  id: OrderDirection
  code: OrderDirection
  createdAt: OrderDirection
}

input PictureUpdateInput {
  image: ImageFieldInput
  code: String
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PictureUpdateArgs {
  where: PictureWhereUniqueInput!
  data: PictureUpdateInput!
}

input PictureCreateInput {
  image: ImageFieldInput
  code: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createConfiguration(data: ConfigurationCreateInput!): Configuration
  createConfigurations(data: [ConfigurationCreateInput!]!): [Configuration]
  updateConfiguration(where: ConfigurationWhereUniqueInput!, data: ConfigurationUpdateInput!): Configuration
  updateConfigurations(data: [ConfigurationUpdateArgs!]!): [Configuration]
  deleteConfiguration(where: ConfigurationWhereUniqueInput!): Configuration
  deleteConfigurations(where: [ConfigurationWhereUniqueInput!]!): [Configuration]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(where: LanguageWhereUniqueInput!, data: LanguageUpdateInput!): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createTranslation(data: TranslationCreateInput!): Translation
  createTranslations(data: [TranslationCreateInput!]!): [Translation]
  updateTranslation(where: TranslationWhereUniqueInput!, data: TranslationUpdateInput!): Translation
  updateTranslations(data: [TranslationUpdateArgs!]!): [Translation]
  deleteTranslation(where: TranslationWhereUniqueInput!): Translation
  deleteTranslations(where: [TranslationWhereUniqueInput!]!): [Translation]
  createContactRequest(data: ContactRequestCreateInput!): ContactRequest
  createContactRequests(data: [ContactRequestCreateInput!]!): [ContactRequest]
  updateContactRequest(where: ContactRequestWhereUniqueInput!, data: ContactRequestUpdateInput!): ContactRequest
  updateContactRequests(data: [ContactRequestUpdateArgs!]!): [ContactRequest]
  deleteContactRequest(where: ContactRequestWhereUniqueInput!): ContactRequest
  deleteContactRequests(where: [ContactRequestWhereUniqueInput!]!): [ContactRequest]
  createPicture(data: PictureCreateInput!): Picture
  createPictures(data: [PictureCreateInput!]!): [Picture]
  updatePicture(where: PictureWhereUniqueInput!, data: PictureUpdateInput!): Picture
  updatePictures(data: [PictureUpdateArgs!]!): [Picture]
  deletePicture(where: PictureWhereUniqueInput!): Picture
  deletePictures(where: [PictureWhereUniqueInput!]!): [Picture]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  configuration(where: ConfigurationWhereUniqueInput!): Configuration
  configurations(where: ConfigurationWhereInput! = {}, orderBy: [ConfigurationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigurationWhereUniqueInput): [Configuration!]
  configurationsCount(where: ConfigurationWhereInput! = {}): Int
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  languagesCount(where: LanguageWhereInput! = {}): Int
  translation(where: TranslationWhereUniqueInput!): Translation
  translations(where: TranslationWhereInput! = {}, orderBy: [TranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TranslationWhereUniqueInput): [Translation!]
  translationsCount(where: TranslationWhereInput! = {}): Int
  contactRequest(where: ContactRequestWhereUniqueInput!): ContactRequest
  contactRequests(where: ContactRequestWhereInput! = {}, orderBy: [ContactRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactRequestWhereUniqueInput): [ContactRequest!]
  contactRequestsCount(where: ContactRequestWhereInput! = {}): Int
  picture(where: PictureWhereUniqueInput!): Picture
  pictures(where: PictureWhereInput! = {}, orderBy: [PictureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PictureWhereUniqueInput): [Picture!]
  picturesCount(where: PictureWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
